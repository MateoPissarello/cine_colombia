"""add state to maintenance model

Revision ID: 5b80b4c2f70e
Revises: 
Create Date: 2025-05-26 11:25:59.703645

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '5b80b4c2f70e'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('cinemas',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('address', sa.String(), nullable=False),
    sa.Column('phone', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('cinema_rooms',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('cinema_id', sa.Integer(), nullable=False),
    sa.Column('room_number', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['cinema_id'], ['cinemas.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cinema_rooms_id'), 'cinema_rooms', ['id'], unique=False)
    op.create_table('users',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=False),
    sa.Column('last_name', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('role', sa.Enum('client', 'admin', 'cinema_admin', 'maintenance_supervisor', 'maintenance_technician', name='user_role'), nullable=True),
    sa.Column('cinema_id', sa.Integer(), nullable=True),
    sa.Column('available', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['cinema_id'], ['cinemas.id'], ),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('first_name'),
    sa.UniqueConstraint('last_name')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_user_id'), 'users', ['user_id'], unique=False)
    op.create_table('maintenance_requests',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('issue', sa.String(), nullable=False),
    sa.Column('complexity', sa.Integer(), nullable=False),
    sa.Column('handled_by_id', sa.Integer(), nullable=True),
    sa.Column('state', sa.Enum('created', 'assigned', 'completed', name='maintenance_state'), nullable=True),
    sa.Column('solved', sa.Boolean(), nullable=True),
    sa.Column('cinema_room', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['cinema_room'], ['cinema_rooms.id'], ),
    sa.ForeignKeyConstraint(['handled_by_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_maintenance_requests_id'), 'maintenance_requests', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_maintenance_requests_id'), table_name='maintenance_requests')
    op.drop_table('maintenance_requests')
    op.drop_index(op.f('ix_users_user_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_cinema_rooms_id'), table_name='cinema_rooms')
    op.drop_table('cinema_rooms')
    op.drop_table('cinemas')
    # ### end Alembic commands ###
